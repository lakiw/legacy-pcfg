[TRAINING_PROGRAM_DETAILS]
program = pcfg_trainer.py
version = 3.3
author = Matt Weir
contact = cweir@vt.edu

[TRAINING_DATASET_DETAILS]
filename = ..\..\..\..\datasets\rockyou_1.txt
comments = None
encoding = utf-8
smoothing = 0.01
number_of_passwords_in_set = 999995
number_of_valid_passwords = 999059

[START]
name = Base Structure
comments = Standard base structures as defined by the original PCFG Paper, with some renaming to prevent naming collisions. Examples are A4D2 from the training word "pass12"
directory = Grammar
filenames = ["Grammar.txt"]
inject_type = Wordlist
function = Transparent
is_terminal = False
replacements = [{"Transition_id": "A", "Config_id": "BASE_A"}, {"Transition_id": "D", "Config_id": "BASE_D"}, {"Transition_id": "O", "Config_id": "BASE_O"}, {"Transition_id": "K", "Config_id": "BASE_K"}, {"Transition_id": "X", "Config_id": "BASE_X"}, {"Transition_id": "M", "Config_id": "BASE_M"}]
file_type = Flat

[BASE_A]
name = A
comments = (A)lpha letter replacements for base structure. Aka "pass12" = A4D2, so this is the A4. Note, this is encoding specific so non-ASCII characters may be considered alpha. For example Cyrillic characters will be considered alpha characters
directory = Alpha
filenames = ["4.txt", "8.txt", "5.txt", "6.txt", "7.txt", "12.txt", "16.txt", "9.txt", "10.txt", "2.txt", "3.txt", "1.txt", "11.txt", "14.txt", "15.txt", "13.txt", "17.txt", "19.txt", "18.txt", "24.txt", "20.txt", "21.txt", "30.txt", "22.txt", "25.txt", "23.txt", "26.txt", "31.txt", "43.txt", "27.txt", "101.txt", "28.txt", "29.txt", "36.txt", "32.txt", "49.txt", "228.txt", "33.txt", "44.txt", "70.txt", "75.txt", "39.txt", "54.txt", "63.txt", "35.txt", "48.txt", "37.txt"]
inject_type = Wordlist
function = Shadow
is_terminal = False
replacements = [{"Transition_id": "Capitalization", "Config_id": "CAPITALIZATION"}]
file_type = Length

[BASE_D]
name = D
comments = (D)igit replacement for base structure. Aka "pass12" = L4D2, so this is the D2
directory = Digits
filenames = ["4.txt", "6.txt", "8.txt", "2.txt", "1.txt", "10.txt", "3.txt", "7.txt", "5.txt", "9.txt", "11.txt", "13.txt", "14.txt", "12.txt", "15.txt", "24.txt", "16.txt", "18.txt", "17.txt", "21.txt", "23.txt", "20.txt", "37.txt", "31.txt", "22.txt", "26.txt", "19.txt", "44.txt", "29.txt", "28.txt", "53.txt", "38.txt", "30.txt", "35.txt", "25.txt", "62.txt", "42.txt", "57.txt", "32.txt", "40.txt"]
inject_type = Copy
function = Copy
is_terminal = True
file_type = Length

[BASE_O]
name = O
comments = (O)ther character replacement for base structure. Aka "pass$$" = L4S2, so this is the S2
directory = Other
filenames = ["1.txt", "2.txt", "3.txt", "4.txt", "16.txt", "6.txt", "5.txt", "7.txt", "15.txt", "10.txt", "8.txt", "9.txt", "20.txt", "13.txt", "32.txt", "11.txt", "12.txt", "14.txt"]
inject_type = Copy
function = Copy
is_terminal = True
file_type = Length

[CAPITALIZATION]
name = Capitalization
comments = Capitalization Masks for words. Aka LLLLUUUU for passWORD
directory = Capitalization
filenames = ["4.txt", "8.txt", "5.txt", "6.txt", "7.txt", "12.txt", "16.txt", "9.txt", "10.txt", "2.txt", "3.txt", "1.txt", "11.txt", "14.txt", "15.txt", "13.txt", "17.txt", "19.txt", "18.txt", "24.txt", "20.txt", "21.txt", "30.txt", "22.txt", "25.txt", "23.txt", "26.txt", "31.txt", "43.txt", "27.txt", "101.txt", "28.txt", "29.txt", "36.txt", "32.txt", "49.txt", "228.txt", "33.txt", "44.txt", "70.txt", "75.txt", "39.txt", "54.txt", "63.txt", "35.txt", "48.txt", "37.txt"]
inject_type = Copy
function = Capitalization
is_terminal = True
file_type = Length

[BASE_K]
name = K
comments = (K)eyboard replacement for base structure. Aka "test1qaz2wsx" = L4K4K4, so this is the K4s
directory = Keyboard
filenames = ["8.txt", "6.txt", "5.txt", "7.txt", "4.txt", "10.txt", "12.txt", "11.txt", "13.txt", "9.txt", "16.txt", "14.txt", "20.txt", "15.txt", "21.txt"]
inject_type = Copy
function = Copy
is_terminal = True
file_type = Length

[BASE_X]
name = X
comments = conte(X)t sensitive replacements to the base structure. This is mostly a grab bag of things like #1 or ;p
directory = Context
filenames = ["2.txt"]
inject_type = Copy
function = Copy
is_terminal = True
file_type = Length

[BASE_M]
name = M
comments = Markov based brute force of a string. Currently based on John the Rippers Markov mode
directory = Markov
filenames = ["markov_prob.txt"]
inject_type = Markov
function = Markov
is_terminal = True
file_type = Flat

